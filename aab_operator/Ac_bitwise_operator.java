package aab_operator;

public class Ac_bitwise_operator {
    public static void main(String[] args) {
        System.out.println(21<<2);
        //21的二进制为：0001 0101. <<表示把二进制数往左移2位，右边补0，结果为：0101 0100，转换为十进制为：84.
        //<<左移几位，就表示乘2的几次方，以上面为例：21*(2^2)=84
        System.out.println(21<<3);  //21*(2^3)=168
        System.out.println(168>>3); //右移有所不同，若最高位为1，则补1，为0就补0
        // >>>这个不需要掌握了，要用在去查吧

        System.out.println(15&8);  //15的二进制为：0000 1111,8的二进制：0000 1000，他们的每一位作&操作。
                                  //1代表true，0代表false，其结果为：0000 1000，故结果为8.

        System.out.println(~6);  //6的二进制为：0000 0110，~代表每位取反，结果为：1111 1001,
                                 //只要二进制的最高位是1，就代表是负数，只要是负数，转十进制的方法为：除最高位外，每位取反再加1.
                                 //结果为：1000 0111，故结果为-7
                                 //正数就没有取反+1的操作，是多少就表示多少。
    }
}
